{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CustomTableCell","withStyles","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","TableCell","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","questions","response","parsed","JSON","parse","length","push","source","value","setState","stringify","error","_this2","parsedQuestions","react_default","a","createElement","className","react_filepond","server","url","process","method","headers","timeout","onload","data","setQuestions","onerror","onError","Table_default","TableHead_default","TableRow_default","TableBody_default","map","question","index","key","component","scope","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mSAeMA,SAAkBC,qBAAW,SAAAC,GAAK,MAAK,CAC3CC,KAAM,CACJC,gBAAiBF,EAAMG,QAAQC,OAAOC,MACtCC,MAAON,EAAMG,QAAQC,OAAOG,OAE9BC,KAAM,CACJC,SAAU,MANUV,CAQpBW,MA4EWC,cAxEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAW,MAHIR,4EAONS,GACX,IAAMC,EAASC,KAAKC,MAAMH,GACtBC,EAAOF,UAAUK,QACnBH,EAAOF,UAAUM,KAAK,CAACC,OAAW,OAAQC,MAAU,qDAEtDb,KAAKc,SAAS,CAACT,UAAcG,KAAKO,UAAUR,EAAOF,6CAG7CC,GACN,IAAMC,EAASC,KAAKC,MAAMH,GAC1BN,KAAKc,SAAS,CAACT,UAAc,CAACE,EAAOS,0CAG9B,IAAAC,EAAAjB,KACAK,EAAaL,KAAKI,MAAlBC,UACDa,EAAkBV,KAAKC,MAAMJ,IAAc,GAEjD,OACIc,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,oEAGAF,EAAAC,EAAAC,cAACE,EAAA,SAAD,CAAUC,OACR,CACEC,IAAK,OACLC,QAAS,CACPD,IAAK,qBACLE,OAAQ,OACRC,QAAS,GACTC,QAAS,IACTC,OAAQ,SAACC,GACPd,EAAKe,aAAaD,IAEpBE,QAAS,SAACF,GACRd,EAAKiB,QAAQH,QAKpBb,EAAgBR,OAAS,GAC1BS,EAAAC,EAAAC,cAAA,OAAKC,UAAW,aACdH,EAAAC,EAAAC,cAACc,EAAAf,EAAD,KACED,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,KACED,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,KACED,EAAAC,EAAAC,cAACvC,EAAD,eACAqC,EAAAC,EAAAC,cAACvC,EAAD,gBAGJqC,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,KACGF,EAAgBqB,IAAI,SAACC,EAASC,GAAV,OACjBtB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAUsB,IAAKD,GACbtB,EAAAC,EAAAC,cAACvC,EAAD,CAAiB6D,UAAU,KAAKC,MAAM,OACnCJ,EAAS5B,QAEZO,EAAAC,EAAAC,cAACvC,EAAD,KAAkB0D,EAAS3B,qBA/D/BgC,aCbEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d2ba3610.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport { withStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\n\n// Import React FilePond\nimport { FilePond } from \"react-filepond\";\n\n// Import FilePond styles\nimport \"filepond/dist/filepond.min.css\";\n\nconst CustomTableCell = withStyles(theme => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white,\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: null\n    }\n  }\n\n  setQuestions(response) {\n    const parsed = JSON.parse(response);\n    if(!parsed.questions.length) {\n      parsed.questions.push({\"source\" : \"none\", \"value\" : \"failed fetching questions from the manifest file\"});\n    }\n    this.setState({\"questions\" : JSON.stringify(parsed.questions)});\n  }\n\n  onError(response) {\n    const parsed = JSON.parse(response);\n    this.setState({\"questions\" : [parsed.error]});\n  }\n\n  render() {\n    const {questions} = this.state;\n    const parsedQuestions = JSON.parse(questions) || [];\n\n    return (\n        <div className=\"App\">\n          <p>\n            Upload a manifest.dat file to fetch some new questions!\n          </p>\n          <FilePond server={\n            {\n              url: '/api',\n              process: {\n                url: '/extract_questions',\n                method: 'POST',\n                headers: {},\n                timeout: 7000,\n                onload: (data) => {\n                  this.setQuestions(data)\n                },\n                onerror: (data) => {\n                  this.onError(data)\n                }\n              }\n            }\n          }/>\n          {parsedQuestions.length > 0 && (\n          <div className={\"questions\"}>\n            <Table>\n              <TableHead>\n                <TableRow>\n                  <CustomTableCell>Source</CustomTableCell>\n                  <CustomTableCell>Value</CustomTableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {parsedQuestions.map((question,index) => (\n                    <TableRow key={index}>\n                      <CustomTableCell component=\"th\" scope=\"row\">\n                        {question.source}\n                      </CustomTableCell>\n                      <CustomTableCell>{question.value}</CustomTableCell>\n                    </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </div>)}\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}